{"version":3,"sources":["webpack:///./src/components/AceEditor.js","webpack:///./src/components/code/JsEval.js"],"names":["AceEditorJs","getEditorValue","props","quizExamples","questionNumber","currentQuiz","algorithm","algorithmProblem","render","_this2","this","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","Fragment","react_ace__WEBPACK_IMPORTED_MODULE_1___default","placeholder","mode","type","theme","name","style","width","minHeight","height","onChange","code","handleExamplesTextArea","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","_code_JsEval__WEBPACK_IMPORTED_MODULE_7__","codeToEval","algorithmAnswer","React","Component","JsEval","state","codeResult","expectedResult","evalMessage","evalCode","eval","e","SyntaxError","checkSolution","_this","handleShowCheckSolution","evaluetedCode","undefined","toString","setState","react__WEBPACK_IMPORTED_MODULE_2___default","className","color","onClick"],"mappings":"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","file":"13-63c3435389e4e2362b5e.js","sourcesContent":["import React from \"react\"\nimport AceEditor from 'react-ace';\n\nimport 'brace/mode/javascript';\nimport 'brace/mode/html';\nimport 'brace/mode/css';\nimport 'brace/theme/monokai';\nimport 'brace/ext/language_tools';\n\nimport JsEval from \"./code/JsEval\";\n\nclass AceEditorJs extends React.Component {\n    getEditorValue = (props) => {\n        if (!props.quizExamples[props.questionNumber + 1] && props.currentQuiz.algorithm === true) {\n            return props.currentQuiz.algorithmProblem\n        } else {\n            return props.quizExamples[props.questionNumber + 1] ? props.quizExamples[props.questionNumber + 1] : \"\"\n        }\n    }\n\n    render() {\n\n        return (\n            <>\n                <div>\n                    <AceEditor\n                        placeholder=\"Add example here\"\n                        mode={this.props.currentQuiz.type}\n                        theme=\"monokai\"\n                        name=\"blah2\"\n                        style={{width: \"100%\", minHeight: \"200px\", height: \"auto\"}}\n                        onChange={code => this.props.handleExamplesTextArea(code)}\n                        fontSize={14}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{$blockScrolling: true}}\n                        value={this.getEditorValue(this.props)}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: true,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                        }}/>\n                </div>\n                <div>\n                    {\n                        this.props.currentQuiz.algorithm === true &&\n                        <JsEval codeToEval={this.getEditorValue(this.props)}\n                                algorithmAnswer={this.props.currentQuiz.algorithmAnswer}/>\n                    }\n                </div>\n            </>\n        )\n    }\n\n}\n\nexport default AceEditorJs\n","import React from \"react\"\n\n\nclass JsEval extends React.Component {\n    state = {\n        codeResult: \"\",\n        expectedResult: \"\",\n        evalMessage: \"\"\n    }\n    evalCode = (code) => {\n        try {\n            return eval(code);\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                return \"Error\"\n            }\n        }\n    }\n\n    checkSolution = (codeResult) => {\n        if (codeResult == this.props.algorithmAnswer) {\n            return 'Your solution returned the expected answer!'\n        } else {\n            return 'Error: Check your solution again'\n\n        }\n    }\n\n    handleShowCheckSolution = () => {\n        let codeResult = \"\"\n        let evaluetedCode = this.evalCode(this.props.codeToEval)\n        if (this.props.codeToEval !== \"\" && evaluetedCode !== undefined) {\n            codeResult = evaluetedCode.toString()\n        } else if (evaluetedCode === undefined) {\n            codeResult = 'undefined'\n        }\n\n        let evalMessage = this.checkSolution(codeResult)\n\n        this.setState({\n            codeResult: codeResult,\n            expectedResult: this.props.algorithmAnswer,\n            evalMessage: evalMessage\n\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"mt-3 mb-3\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <button style={{color: \"white\"}} onClick={this.handleShowCheckSolution} className=\"btn btn-warning mb-2\">Check\n                            Solution\n                        </button>\n                    </div>\n                </div>\n                {\n                    (this.state.codeResult !== \"\" || this.state.expectedResult !== \"\" || this.state.evalMessage !== \"\") &&\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Your Result</div>\n                            <div className=\"text-center\">\n                                {this.state.codeResult}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Expected Result</div>\n                            <div className=\"text-center\">\n                                {this.state.expectedResult}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Status</div>\n                            <div className=\"text-center\">\n                                {this.state.evalMessage}\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default JsEval\n"],"sourceRoot":""}