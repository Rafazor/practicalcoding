{"version":3,"sources":["webpack:///./src/components/AceEditor.js","webpack:///./src/components/code/JsEval.js"],"names":["AceEditorJs","getEditorValue","props","quizExamples","questionNumber","currentQuiz","algorithm","algorithmProblem","render","_this2","this","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","Fragment","react_ace__WEBPACK_IMPORTED_MODULE_1___default","placeholder","mode","theme","name","style","width","minHeight","height","onChange","code","handleExamplesTextArea","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","_code_JsEval__WEBPACK_IMPORTED_MODULE_7__","codeToEval","algorithmAnswer","React","Component","JsEval","state","codeResult","expectedResult","evalMessage","evalCode","eval","e","SyntaxError","checkSolution","_this","handleShowCheckSolution","evaluetedCode","undefined","toString","setState","react__WEBPACK_IMPORTED_MODULE_2___default","className","color","onClick"],"mappings":"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","file":"12-396feb76bebf3ff9e9aa.js","sourcesContent":["import React from \"react\"\r\nimport AceEditor from 'react-ace';\r\n\r\nimport 'brace/mode/javascript';\r\nimport 'brace/mode/html';\r\nimport 'brace/mode/css';\r\nimport 'brace/theme/monokai';\r\nimport 'brace/ext/language_tools';\r\n\r\nimport JsEval from \"./code/JsEval\";\r\n\r\nclass AceEditorJs extends React.Component {\r\n    getEditorValue = (props) => {\r\n        if (!props.quizExamples[props.questionNumber + 1] && props.currentQuiz.algorithm === true) {\r\n            return props.currentQuiz.algorithmProblem\r\n        } else {\r\n            return props.quizExamples[props.questionNumber + 1] ? props.quizExamples[props.questionNumber + 1] : \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    <AceEditor\r\n                        placeholder=\"Add example here\"\r\n                        mode=\"javascript\"\r\n                        theme=\"monokai\"\r\n                        name=\"blah2\"\r\n                        style={{width: \"100%\", minHeight: \"200px\", height: \"auto\"}}\r\n                        onChange={code => this.props.handleExamplesTextArea(code)}\r\n                        fontSize={14}\r\n                        showPrintMargin={true}\r\n                        showGutter={true}\r\n                        highlightActiveLine={true}\r\n                        editorProps={{$blockScrolling: true}}\r\n                        value={this.getEditorValue(this.props)}\r\n                        setOptions={{\r\n                            enableBasicAutocompletion: true,\r\n                            enableLiveAutocompletion: true,\r\n                            enableSnippets: true,\r\n                            showLineNumbers: true,\r\n                            tabSize: 2,\r\n                        }}/>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.props.currentQuiz.algorithm === true &&\r\n                        <JsEval codeToEval={this.getEditorValue(this.props)}\r\n                                algorithmAnswer={this.props.currentQuiz.algorithmAnswer}/>\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AceEditorJs\r\n","import React from \"react\"\r\n\r\n\r\nclass JsEval extends React.Component {\r\n    state = {\r\n        codeResult: \"\",\r\n        expectedResult: \"\",\r\n        evalMessage: \"\"\r\n    }\r\n    evalCode = (code) => {\r\n        try {\r\n            return eval(code);\r\n        } catch (e) {\r\n            if (e instanceof SyntaxError) {\r\n                return \"Error\"\r\n            }\r\n        }\r\n    }\r\n\r\n    checkSolution = (codeResult) => {\r\n        if (codeResult == this.props.algorithmAnswer) {\r\n            return 'Your solution returned the expected answer!'\r\n        } else {\r\n            return 'Error: Check your solution again'\r\n\r\n        }\r\n    }\r\n\r\n    handleShowCheckSolution = () => {\r\n        let codeResult = \"\"\r\n        let evaluetedCode = this.evalCode(this.props.codeToEval)\r\n        if (this.props.codeToEval !== \"\" && evaluetedCode !== undefined) {\r\n            codeResult = evaluetedCode.toString()\r\n        } else if (evaluetedCode === undefined) {\r\n            codeResult = 'undefined'\r\n        }\r\n\r\n        let evalMessage = this.checkSolution(codeResult)\r\n\r\n        this.setState({\r\n            codeResult: codeResult,\r\n            expectedResult: this.props.algorithmAnswer,\r\n            evalMessage: evalMessage\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-3 mb-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        <button style={{color: \"white\"}} onClick={this.handleShowCheckSolution} className=\"btn btn-warning mb-2\">Check\r\n                            Solution\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (this.state.codeResult !== \"\" || this.state.expectedResult !== \"\" || this.state.evalMessage !== \"\") &&\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Your Result</div>\r\n                            <div className=\"text-center\">\r\n                                {this.state.codeResult}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Expected Result</div>\r\n                            <div className=\"text-center\">\r\n                                {this.state.expectedResult}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"mb-2 mt-2 text-center font-weight-bold border-bottom\">Status</div>\r\n                            <div className=\"text-center\">\r\n                                {this.state.evalMessage}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default JsEval\r\n"],"sourceRoot":""}